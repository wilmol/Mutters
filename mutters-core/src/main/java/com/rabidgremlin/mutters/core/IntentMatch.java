/* Licensed under Apache-2.0 */
package com.rabidgremlin.mutters.core;

import java.util.Collections;
import java.util.Map;
import java.util.Objects;

/**
 * This class holds the details of an intent match.
 * 
 * @author rabidgremlin
 *
 */
public class IntentMatch
{
  /** The intent that was matched. */
  private final Intent intent;

  /** Map of slots that were matched. */
  private final Map<Slot<?>, SlotMatch<?>> slotMatches;

  /** The utterance that was matched against. */
  private final String utterance;

  /**
   * The matching scores from the matcher. Should be set even if no match was
   * found.
   */
  private final MatcherScores matcherScores;

  /**
   * Constructor for the intent match. Use for a successful match.
   * 
   * @param intent        The intent that was matched.
   * @param slotMatches   The slots that were matched.
   * @param utterance     The utterance that was matched against.
   * @param matcherScores The scores generated by the matcher.
   */
  public IntentMatch(Intent intent, Map<Slot<?>, SlotMatch<?>> slotMatches, String utterance,
      MatcherScores matcherScores)
  {
    this.intent = Objects.requireNonNull(intent);
    this.slotMatches = Objects.requireNonNull(slotMatches);
    this.utterance = Objects.requireNonNull(utterance);
    this.matcherScores = Objects.requireNonNull(matcherScores);
  }

  /**
   * Returns the Intent that was matched.
   * 
   * @return The intent that was matched.
   */
  public Intent getIntent()
  {
    return intent;
  }

  /**
   * Returns the slots that were matched.
   * 
   * @return Map of the slots that were matched.
   */
  public Map<Slot<?>, SlotMatch<?>> getSlotMatches()
  {
    return Collections.unmodifiableMap(slotMatches);
  }

  /**
   * Returns the specified slot match if the slot was matched.
   * 
   * @param slotName The name of the slot to return.
   * @return The slot match or null if the slot was not matched.
   */
  public SlotMatch<?> getSlotMatch(String slotName)
  {
    for (SlotMatch<?> match : slotMatches.values())
    {
      if (match.getSlot().getName().equalsIgnoreCase(slotName))
      {
        return match;
      }
    }
    return null;
  }

  /**
   * Removes the specified slot match from the intent match.
   * 
   * @param slotName The name of the slot to remove the match for.
   */
  public void removeSlotMatch(String slotName)
  {
    SlotMatch<?> match = getSlotMatch(slotName);
    if (match != null)
    {
      slotMatches.remove(match.getSlot());
    }
  }

  /**
   * Returns the utterance that was matched against.
   * 
   * @return The utterance that was matched against.
   */
  public String getUtterance()
  {
    return utterance;
  }

  /**
   * Returns the scores that the matcher used.
   * 
   * @return The scores that the matcher used.
   */
  public MatcherScores getMatcherScores()
  {
    return matcherScores;
  }

  /**
   * Returns true if an intent was match.
   * 
   * @return returns true if an intent was matched
   */
  public boolean matched()
  {
    return intent != Intent.none();
  }

}
