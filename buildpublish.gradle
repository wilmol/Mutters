buildscript {
    repositories {
        mavenCentral()
    }
    dependencies { 
        classpath "ch.raffael.pegdown-doclet:pegdown-doclet:$pegdownDocletVersion"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotlessVersion"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'ch.raffael.pegdown-doclet' // to allow markdown in the javadoc
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'findbugs'

// java version
sourceCompatibility = '1.8'
targetCompatibility = '1.8'


// Maven publication
group = 'com.rabidgremlin'


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// only sign if we doing a release AND we are uploading
// allows devs to gradle build or gradle install without PGP keys etc 
def isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask(uploadArchives) }
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Mutters'
        packaging 'jar'
        description 'A framework for building bots.'
        url 'https://github.com/rabidgremlin/Mutters'

        scm {
          connection 'scm:git:https://github.com/rabidgremlin/Mutters'
          developerConnection 'scm:git:https://github.com/rabidgremlin/Mutters'
          url 'https://github.com/rabidgremlin/Mutters'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'rabidgremlin'
            name 'Jonathan Ackerman'
            email 'jack@rabidgremlin.com'
          }
        }
      }
    }
  }
}


spotless {
    java {
      licenseHeader '/* Licensed under Apache-2.0 */'
      importOrder 'java', 'javax', 'org', 'com'
      removeUnusedImports() // removes any unused imports
      eclipse().configFile "$rootProject.projectDir/spotless.eclipseformat.xml"
    }
}    

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply plugin: 'jacoco'
jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled = false
  }
}

// Tests
tasks.withType(Test) {
  // run tests in parallel, assumes they're threadsafe
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  // use JUnit 5 engine
  useJUnitPlatform()
  testLogging {
    events = ['failed', 'skipped']
    // log the full failure messages
    exceptionFormat = 'full'
    showExceptions = true
    showCauses = true
    showStackTraces = true
    // log the overall results (based on https://stackoverflow.com/a/36130467/6122976)
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println("Results: ${result.resultType} (${result.testCount} test${result.testCount > 1 ? "s" : ""}, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)")
      }
    }
  }
}
